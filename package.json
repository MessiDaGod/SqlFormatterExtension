{
    "name": "sql-stylist",
    "repository": {
        "type": "git",
        "url": "https://github.com/MessiDaGod/SqlFormatterExtension"
    },
    "displayName": "SQL Stylist (T-SQL Formatter)",
    "description": "Opinionated T-SQL formatter matching ChatGPT's house style: uppercase keywords, clean indentation, optional AS alignment and block-comments.",
    "version": "0.1.1",
    "publisher": "joeshakely",
    "engines": {
        "vscode": "^1.85.0"
    },
    "categories": [
        "Formatters"
    ],
    "activationEvents": [
        "onLanguage:sql",
        "onLanguage:plaintext"
    ],
    "main": "./dist/extension.js",
    "contributes": {
        "configuration": {
            "title": "SQL Stylist",
            "properties": {
                "sqlStylist.keywordCase": {
                    "type": "string",
                    "enum": [
                        "upper",
                        "lower",
                        "preserve"
                    ],
                    "default": "upper",
                    "description": "Keyword letter case."
                },
                "sqlStylist.tabWidth": {
                    "type": "integer",
                    "default": 4,
                    "minimum": 0,
                    "description": "Spaces per indent level."
                },
                "sqlStylist.linesBetweenQueries": {
                    "type": "integer",
                    "default": 2,
                    "minimum": 0,
                    "description": "Blank lines between queries."
                },
                "sqlStylist.convertLineCommentsToBlock": {
                    "type": "boolean",
                    "default": true,
                    "description": "Convert `--` comments to `/* ... */` on formatting (comment-only lines)."
                },
                "sqlStylist.alignAs": {
                    "type": "boolean",
                    "default": false,
                    "description": "Align `AS` in SELECT lists (naive; best for simple SELECT lists)."
                },
                "sqlStylist.commaBeforeColumn": {
                    "type": "boolean",
                    "default": false,
                    "description": "Use leading commas in SELECT lists (comma before column)."
                },
                "sqlStylist.oneLineFunctionArgs": {
                    "type": "boolean",
                    "default": true,
                    "description": "Collapse args of common functions (e.g., ISNULL/CONVERT) to a single line."
                }
            }
        },
        "commands": [
            {
                "command": "sqlStylist.formatSelectionOrDocument",
                "title": "SQL Stylist: Format SQL (Selection or Document)",
                "category": "SQL Stylist"
            }
        ],
        "menus": {
            "editor/context": [
                {
                    "command": "sqlStylist.formatSelectionOrDocument",
                    "group": "2_sql",
                    "when": "resourceExtname =~ /\\.(sql|txt)$/"
                }
            ],
            "editor/title": [
                {
                    "command": "sqlStylist.formatSelectionOrDocument",
                    "group": "navigation@100",
                    "when": "resourceExtname =~ /\\.(sql|txt)$/"
                }
            ]
        }
    },
    "scripts": {
        "compile": "esbuild src/extension.ts --bundle --outfile=dist/extension.js --platform=node --external:vscode --format=cjs",
        "watch": "npm run compile -- --watch",
        "package": "vsce package",
        "lint": "echo \"No lint configured\""
    },
    "devDependencies": {
        "@types/node": "^20.0.0",
        "@types/vscode": "^1.85.0",
        "esbuild": "^0.21.0",
        "typescript": "^5.4.0",
        "vsce": "^2.15.0"
    },
    "dependencies": {
        "sql-formatter": "^15.2.0"
    }
}